{"version":3,"sources":["hoc/hoc.js","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/DialogsFormik.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["mapStateToPropsToRedirect","state","isAuth","auth","redirectToLoginPage","RedirectedComponent","RedirectComponent","this","props","to","React","Component","connect","module","exports","DialogItem","path","id","className","s","dialog","navData","isActive","active","dialogWrapper","image","src","avatar","name","Message","message","messageWrapper","DialogsFormik","formik","useFormik","initialValues","validationSchema","Yup","required","max","onSubmit","values","addNewMessage","handleSubmit","formControl","touched","errors","error","placeholder","onChange","handleChange","onBlur","handleBlur","value","post","type","maxLength30","maxLengthCreator","DialogsReduxForm","reduxForm","form","Field","component","Textarea","validate","Dialogs","dialogElements","dialogsData","map","d","messagesElements","messagesData","m","formData","addMessage","dialogs","dialogsList","messagesList","compose","dialogsInner","dialogsPage","dispatch","addMessageActionCreator"],"mappings":"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","file":"static/js/4.cb5b428a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Navigate} from \"react-router\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsToRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nconst redirectToLoginPage = (RedirectedComponent) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) {\r\n                return <Navigate to={\"/login\"}/>\r\n            }\r\n            return <RedirectedComponent {...this.props}/>\r\n        }\r\n    }\r\n\r\n    return connect(mapStateToPropsToRedirect)(RedirectComponent);\r\n}\r\n\r\nexport default redirectToLoginPage;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1-ZJ0\",\"dialogsList\":\"Dialogs_dialogsList__18jdt\",\"messagesList\":\"Dialogs_messagesList__38kNb\",\"form\":\"Dialogs_form__3VqlV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__7B9_l\",\"dialogWrapper\":\"DialogItem_dialogWrapper__35tY9\",\"active\":\"DialogItem_active__V9sW3\",\"image\":\"DialogItem_image__2W2Wk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__g8rZv\",\"messageWrapper\":\"Message_messageWrapper__eA-1i\",\"image\":\"Message_image__OmvVN\"};","import {NavLink} from \"react-router-dom\";\r\nimport s from \"./DialogItem.module.css\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <li className={s.dialog}>\r\n            <NavLink to={path} className={(navData) => navData.isActive ? s.active : ''}>\r\n                <div className={s.dialogWrapper}>\r\n                    <img className={s.image}\r\n                         src={props.avatar}/>\r\n                    <span>{props.name}</span>\r\n                </div>\r\n            </NavLink>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import s from \"./Message.module.css\";\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <li className={s.message}>\r\n            <div className={s.messageWrapper}>\r\n                <img className={s.image} src={props.avatar}/>\r\n                <span>{props.message}</span>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Message;","import {useFormik} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport React from \"react\";\r\nimport s from \"../common/FormsControls/FormsControls.module.css\";\r\n\r\nconst DialogsFormik = (props) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            message: \"\"\r\n        },\r\n        validationSchema: Yup.object({\r\n            message: Yup.string().required(\"Введите текст сообщения\")\r\n                .max(50, \"Максимальная длина сообщения - 50 символов\")\r\n        }),\r\n        onSubmit(values) {\r\n            props.addNewMessage(values)\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <h3>Dialogs Formik</h3>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div className={s.formControl + \" \" + (formik.touched.message && formik.errors.message ? s.error : \"\")}>\r\n                    <textarea\r\n                        placeholder=\"Enter your text.\"\r\n                        name=\"message\"\r\n                        id=\"message\"\r\n                        onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.post}/>\r\n\r\n                    {formik.touched.message && formik.errors.message ? <div>{formik.errors.message}</div> : null}\r\n                </div>\r\n                <div>\r\n                    <button type=\"submit\">Add post</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogsFormik;","import React from 'react';\r\nimport s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport DialogsFormik from \"./DialogsFormik\";\r\n\r\nconst maxLength30 = maxLengthCreator(30);\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let dialogElements = props.dialogsData.map((d) => <DialogItem name={d.name} id={d.id} avatar={d.avatar}\r\n                                                                  key={d.id}/>)\r\n    let messagesElements = props.messagesData.map((m) => <Message message={m.message} avatar={m.avatar} key={m.id}/>)\r\n\r\n    const addNewMessage = (formData) => {\r\n        props.addMessage(formData.message);\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <ul className={s.dialogsList}>\r\n                {dialogElements}\r\n            </ul>\r\n            <div className={s.messagesList}>\r\n                <ul>\r\n                    {messagesElements}\r\n                </ul>\r\n                <DialogsReduxForm onSubmit={addNewMessage}/>\r\n\r\n                <DialogsFormik addNewMessage={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst DialogsForm = (props) => {\r\n    return (\r\n        <form className={s.form} onSubmit={props.handleSubmit}>\r\n            <div><Field placeholder=\"Enter your message\"\r\n                        component={Textarea} name={\"message\"} validate={[required, maxLength30]}/></div>\r\n            <div>\r\n                <button>Send message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst DialogsReduxForm = reduxForm({\r\n    form: 'dialogs'\r\n})(DialogsForm);\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {addMessageActionCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport redirectToLoginPage from \"../../hoc/hoc\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsInner: state.dialogsPage.dialogsInner,\r\n        dialogsData: state.dialogsPage.dialogsData,\r\n        messagesData: state.dialogsPage.messagesData\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addMessage: (message) => {\r\n            dispatch(addMessageActionCreator(message));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    redirectToLoginPage\r\n)(Dialogs);"],"sourceRoot":""}